// Basic async function test
async fun delay(ms) {
  // Simulate delay using native clock function
  var start = clock();
  while (clock() - start < ms) {
    // Busy wait
  }
  return "done";
}

// Test async function call
async fun test1() {
  print "Starting test1...";
  var result = await delay(1);
  print "After delay: " + result;
}

// Test multiple awaits
async fun test2() {
  print "Starting test2...";
  var result1 = await delay(0.5);
  print "First delay: " + result1;
  var result2 = await delay(0.5);
  print "Second delay: " + result2;
}

// Test error handling
async fun throwError() {
  var x = nil;
  return x.nonexistent; // Should throw error
}

async fun test3() {
  print "Starting test3...";
  try {
    await throwError();
  } catch {
    print "Caught error as expected";
  }
}

// Test async method in class
class AsyncTest {
  async method() {
    print "Starting method...";
    var result = await delay(0.5);
    print "Method completed: " + result;
  }
}

// Run all tests
print "Running async/await tests...";

test1();
print "test1 called";

test2();
print "test2 called";

test3();
print "test3 called";

var obj = AsyncTest();
obj.method();
print "method called";